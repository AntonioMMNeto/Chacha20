#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define PIO_CHAR_OUT    (int*) 0x61030
#define PIO_READY_OUT   (int*) 0x61020
#define PIO_CHAR_IN     (int*) 0x61010
#define PIO_READY_IN    (int*) 0x61000
#define MEMORIA_DADOS   (int*) 0x00000

#define INT_BITS 32

unsigned int constant[4] = {0x61707865, 0x3320646e, 0x79622d32, 0x6b206574};  // "expand 32-byte k"
unsigned int key[8] = {0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c, 0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c}; // password
unsigned int state[4][4]; // 4x4 matrix
unsigned int *pointer_state = &state[0][0];
unsigned int nonce[3] = {0x09000000, 0x4a000000, 0x00000000};
unsigned int counter = 0x01;
unsigned char block[64];
void generate_nonce();

unsigned char encrypted_message[512];
unsigned char decrypted_message[512];

void inner_block(unsigned int *state);
void quarter_round(unsigned int *state, unsigned int a, unsigned int b, unsigned int c, unsigned int d);
unsigned int left_rotate(unsigned int value, unsigned short int num_shifted);
unsigned int *chacha20_block(unsigned int *key, unsigned int counter, unsigned int *nonce);
unsigned char* xor_message(char *message, char *encrypted_message, int size);

int main()
{
	const char *message = "Nos dias seguintes";
	int size = strlen(message);
	// Encrpyt message, xor with state
	printf("Original message: %s\n", message);
	unsigned char* text_en = xor_message(message, encrypted_message, size); // encrypt
	printf("\nEncrypted_message Text: %s\n", text_en);
	xor_message(encrypted_message, decrypted_message, size); // decrypt
	printf("\nDecrypted Text: %s\n", decrypted_message);


	// bit mais significativo: escrita terminada
	// bit menos significativo: caractere pronto
	*PIO_READY_OUT = 0b10;
	*PIO_READY_OUT = 0b00;
	for (int i = 0; i < strlen(message); i++) {
	  *PIO_READY_OUT = 0b00;
	  *PIO_CHAR_OUT = decrypted_message[i];
	  *PIO_READY_OUT = 0b01;
	}
	*PIO_READY_OUT = 0b11;


	return 0;
}

void inner_block(unsigned int *state){
    quarter_round(state, 0, 4, 8, 12);
    quarter_round(state, 1, 5, 9, 13);
    quarter_round(state, 2, 6, 10, 14);
    quarter_round(state, 3, 7, 11, 15);
    quarter_round(state, 0, 5, 10, 15);
    quarter_round(state, 1, 6, 11, 12);
    quarter_round(state, 2, 7, 8, 13);
    quarter_round(state, 3, 4, 9, 14);
}

void quarter_round(unsigned int *state, unsigned int a, unsigned int b, unsigned int c, unsigned int d){

    unsigned int *p = state;

    *(p + a) += *(p + b);
    *(p + d) ^= *(p + a);
    *(p + d) = left_rotate(*(p + d), 16);
    *(p + c) += *(p + d);
    *(p + b) ^= *(p + c);
    *(p + b) = left_rotate(*(p + b), 12);
    *(p + a) += *(p + b);
    *(p + d) ^= *(p + a);
    *(p + d) = left_rotate(*(p + d), 8);
    *(p + c) += *(p + d);
    *(p + b) ^= *(p + c);
    *(p + b) = left_rotate(*(p + b), 7);
}

unsigned int left_rotate(unsigned int value, unsigned short int num_shifted){
    return (value << num_shifted) | (value >> (INT_BITS - num_shifted));
}

unsigned int* chacha20_block(unsigned int *key, unsigned int counter, unsigned int *nonce){
    unsigned short int cont = 0;

    // Attributing value on matrix
    for (unsigned short int i = 0; i < 16; i++)
    {
        if(i <= 3){
            *(pointer_state + (i)) = constant[cont];
            cont++;
            if(i == 3) cont = 0;
        }
        else if((i >= 4) && (i <= 11)){
            *(pointer_state + (i)) = key[cont];
            cont++;
            if(i == 11) cont = 0;
        }
        else if(i == 12){
            *(pointer_state + (i)) = counter;
        }
        else{
            *(pointer_state + (i)) = nonce[cont];
            cont++;
        }
    }

    unsigned int initial_state[4][4];
    unsigned int *pointer_initial = &initial_state[0][0];

    for (unsigned short int i = 0; i < 16; i++)
    {
        *(pointer_initial + i) = *(pointer_state + i);
    }

    for (unsigned short int i = 0; i < 10; i++)
    {
        inner_block(&state[0][0]);
    }

    for (unsigned short int i = 0; i < 16; i++)
    {
        *(pointer_state + i) = *(pointer_state + i) + *(pointer_initial + i);
    }

    return pointer_state;
}

// XOR message with state matrix
unsigned char* xor_message(char *message, char *encrypted_message, int size) {
    generate_nonce();

	printf("\nTamanho do texto: %d", strlen(message));
	printf("\nTexto original: %s\n", message);

    unsigned int len_text = size;
    unsigned int *key_stream;
    unsigned int parts = len_text / 64 + 1;

    for (int part = 0; part < parts; part++)
    {
        key_stream = chacha20_block(&key[0], counter + part, &nonce[0]);
        unsigned int last_i = part * 64 + 64;
        if (part == parts - 1) {
            last_i = len_text;
        }
        for (int j = part * 64; j < last_i; j++)
        {
            // get ith byte of the state, with 4 bytes per word. 4x4
        	unsigned int state_word = *(key_stream + (j / 16));
            block[j] = (state_word >> (8 * (j % 4))) & 0xff;
            *(encrypted_message + j) = *(message + j) ^ block[j];
            //printf("\npart: %d, j: %d\n", part, j);
            printf("Char: %c\n", *(encrypted_message + j));
            //printf("\n");
        }
    }

    unsigned char text[512];
    sprintf(text,"%s",encrypted_message);
    printf("Text %s",text);
    return &text;
}

void generate_nonce() {
    int seed;
    // Método 1: Gerar com uma seed fixa.
    seed = 5;

    // Método 2: Gerar usando a chave para a seed
    for (int i = 0; i < 8; i++) {
        seed |= (key[i] & 0xF) << (i * 4);
    }

    srand(seed);
    nonce[0] = rand();
    nonce[1] = rand();
    nonce[2] = rand();
}
